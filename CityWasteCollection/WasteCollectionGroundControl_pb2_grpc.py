# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import WasteCollectionGroundControl_pb2 as WasteCollectionGroundControl__pb2


class WasteCollectionServiceStub(object):
    """WasteCollectionService
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetRoute = channel.unary_unary(
                '/WasteCollection.WasteCollectionService/GetRoute',
                request_serializer=WasteCollectionGroundControl__pb2.VehicleIdentifier.SerializeToString,
                response_deserializer=WasteCollectionGroundControl__pb2.CollectionRoute.FromString,
                )
        self.DispatchAnotherVehicle = channel.unary_unary(
                '/WasteCollection.WasteCollectionService/DispatchAnotherVehicle',
                request_serializer=WasteCollectionGroundControl__pb2.VehicleCurrentContext.SerializeToString,
                response_deserializer=WasteCollectionGroundControl__pb2.DispatchInfo.FromString,
                )


class WasteCollectionServiceServicer(object):
    """WasteCollectionService
    """

    def GetRoute(self, request, context):
        """GetRoute Procedure: Determines a route for a waste vehicle to take.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DispatchAnotherVehicle(self, request, context):
        """DispatchAnotherVehicle: When a waste vehicle reaches max capacity, request another vehicle to finish the route.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WasteCollectionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetRoute': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRoute,
                    request_deserializer=WasteCollectionGroundControl__pb2.VehicleIdentifier.FromString,
                    response_serializer=WasteCollectionGroundControl__pb2.CollectionRoute.SerializeToString,
            ),
            'DispatchAnotherVehicle': grpc.unary_unary_rpc_method_handler(
                    servicer.DispatchAnotherVehicle,
                    request_deserializer=WasteCollectionGroundControl__pb2.VehicleCurrentContext.FromString,
                    response_serializer=WasteCollectionGroundControl__pb2.DispatchInfo.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'WasteCollection.WasteCollectionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WasteCollectionService(object):
    """WasteCollectionService
    """

    @staticmethod
    def GetRoute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/WasteCollection.WasteCollectionService/GetRoute',
            WasteCollectionGroundControl__pb2.VehicleIdentifier.SerializeToString,
            WasteCollectionGroundControl__pb2.CollectionRoute.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DispatchAnotherVehicle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/WasteCollection.WasteCollectionService/DispatchAnotherVehicle',
            WasteCollectionGroundControl__pb2.VehicleCurrentContext.SerializeToString,
            WasteCollectionGroundControl__pb2.DispatchInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
