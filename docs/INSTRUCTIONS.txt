> source venv/bin/activate

# ---------------------------------------------------------------------------------------------------------------------
# Some Creation Instructions:
# ---------------------------------------------------------------------------------------------------------------------

# Install Plugins:
1. Files>Settings>Plugins>"Protobuf"

# Install Libraries:
> venv/bin/python3 -m pip install --upgrade pip
> venv/bin/python3 -m pip install grpcio
> venv/bin/python3 -m pip install grpcio-tools
> pip3 install pika

# Also:
1. Install RabbitMQ
2. Install Docker

# Create/parse gRPC interfaces:
> venv/bin/python3 -m grpc_tools.protoc -I./protos protos/WasteCollectionGroundControl.proto --python_out=. --grpc_python_out=.


 ---------------------------------------------------------------------------------------------------------------------
# Usage Instructions:
# ---------------------------------------------------------------------------------------------------------------------


# Usage

1. Run Docker/RabbitMQ-Server container:
   > sudo /etc/init.d/rabbitmq-server stop
   > sudo chmod 666 /var/run/docker.sock
   > docker run -it --rm --name mqserver -p 5672:5672 -p 15672:15672 rabbitmq:3.9-management

2. Access management interface at: http://localhost:15672/
   - Username: guest
   - Password: guest

3. Run CityWasteCollectionServer.py

   Method 1:
   - Press the run button in PyCharm on the CityWasteCollectionServer.py file.
   - This will also display the Directed Graph which is generated based on the directed edges provided
     in maps/NodeMap.txt

   Method 2:
   - Open a new terminal in PyCharm and run:
     > python3 CityWasteCollectionServer.py

4. Run CityWasteCollectionResidentialSubscriber.py

   - This file subscribes to the RabbitMQ 'Notifier' exchange which operates in a 'fanout' style.
   - Multiple users can subscribe to the exchange to receive notifications about waste collection.
   - After running the program, the user has the option to receive all notifications or notifications
     for a specific edge (node-pair).

   - Open a new terminal in Pycharm and run:
   > python3 CityWasteCollectionResidentialSubscriber.py

   - When the program prompts for input:
     - A user can type 'all' to receive all notifications.
     - A user can type two integers representing a node-pair (edge) of the map, separated by a space.
       - Example: '4 8' for the edge [4,8]

5. Run the CityWasteCollectionClient program:
   
   - Open a new terminal in PyCharm and run:
   > python3 CityWasteCollectionClient.py <VEHICLE_ID> <VEHICLE_TYPE>

   - VEHICLE_ID is an interger representing the waste collection vehicle's ID.
   - VEHICLE_TYPE specifies the type of collection; waste, recycling, etc...
   - Example:
     > python3 CityWasteCollectionClient.py 1 Garbage


Example, for Rover 1:
python3 ground_control_client.py 1


